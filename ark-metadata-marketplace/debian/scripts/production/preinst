#!/bin/sh
# preinst script for ark-metadata-marketplace
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <new-preinst> `install'
#        * <new-preinst> `install' <old-version>
#        * <new-preinst> `upgrade' <old-version>
#        * <old-preinst> `abort-upgrade' <new-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    install|upgrade)
        mkdir -p /usr/share/ark-metadata-marketplace/src/ark-metadata-marketplace/ark-metadata-marketplace-test
        mkdir -p /etc/ark-project

        CONFIG_FILE="/etc/ark-project/api-marketplace.config.production.yml"

        if [ -f "$CONFIG_FILE" ]; then
            echo "Patching existing $CONFIG_FILE..."

            grep -q "^port:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'port: 8080' >> "$CONFIG_FILE"
            fi

            # Add log_level if it does not exist
            grep -q "^aws_access_key_id:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_access_key_id: ""' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_secret_access_key:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_access_key: ""' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_default_region:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_default_region: ""' >> "$CONFIG_FILE"
            fi

            grep -q "^rust_log:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'rust_log: "info,sqlx::query=trace"' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_secret_read_db:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_read_db: "prod/ark-db-credentials-read-private"' >> "$CONFIG_FILE"
            fi
        
            grep -q "^aws_secret_write_db:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_write_db: "prod/ark-db-credentials"' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_secret_redis_db:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_redis_db: "prod/ark-redis-credentials"' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_secret_eleasticsearch_db:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_eleasticsearch_db: "prod/ark-elasticsearch-credentials"' >> "$CONFIG_FILE"
            fi

        else
            # Create the config file with default values if it doesn't exist
            echo "Creating $CONFIG_FILE with default values..."
            cat <<EOF > "$CONFIG_FILE"
port: 8080
aws_access_key_id: ""
aws_secret_access_key: ""
aws_default_region: ""
rust_log: "info,sqlx::query=trace"
aws_secret_read_db: "prod/ark-db-credentials-read-private"
aws_secret_write_db: "prod/ark-db-credentials"
aws_secret_redis_db: "prod/ark-redis-credentials"
aws_secret_eleasticsearch_db: "prod/ark-elasticsearch-credentials"

EOF
        fi
    ;;

    abort-upgrade)
    ;;

    *)
        echo "preinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0