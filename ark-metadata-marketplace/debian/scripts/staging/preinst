#!/bin/sh
# preinst script for ark-metadata-marketplace
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <new-preinst> `install'
#        * <new-preinst> `install' <old-version>
#        * <new-preinst> `upgrade' <old-version>
#        * <old-preinst> `abort-upgrade' <new-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    install|upgrade)
        mkdir -p /usr/share/ark-metadata-marketplace/src/ark-metadata-marketplace/ark-metadata-marketplace-test
        mkdir -p /etc/ark-project

        CONFIG_FILE="/etc/ark-project/api-marketplace.config.staging.yml"

        if [ -f "$CONFIG_FILE" ]; then
            echo "Patching existing $CONFIG_FILE..."

            # Add log_level if it does not exist
            grep -q "^aws_access_key_id:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_access_key_id: ""' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_secret_access_key:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_access_key: ""' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_default_region:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_default_region: ""' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_secret_bucket_name:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_bucket_name: "staging/ark-bucket-name"' >> "$CONFIG_FILE"
            fi

            grep -q "^rcp_provider:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'rcp_provider: "http://localhost:6060/v0_7"' >> "$CONFIG_FILE"
            fi

            grep -q "^chain_id:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'chain_id: "0x534e5f4d41494e"' >> "$CONFIG_FILE"
            fi

            grep -q "^ipfs_timeout_duration:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'ipfs_timeout_duration: "1m"' >> "$CONFIG_FILE"
            fi

            grep -q "^loop_delay_duration:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'loop_delay_duration: "1m"' >> "$CONFIG_FILE"
            fi

            grep -q "^ipfs_gateway_uri:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'ipfs_gateway_uri: "https://ipfs.arkproject.dev/ipfs/"' >> "$CONFIG_FILE"
            fi

            grep -q "^filter:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'filter: ""' >> "$CONFIG_FILE"
            fi

            grep -q "^refresh_contract_metadata:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'refresh_contract_metadata: "false"' >> "$CONFIG_FILE"
            fi

            grep -q "^rust_log:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'rust_log: "info,sqlx::query=trace"' >> "$CONFIG_FILE"
            fi

            grep -q "^aws_secret_read_db:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_read_db: "staging/ark-db-credentials-read-private"' >> "$CONFIG_FILE"
            fi
        
            grep -q "^aws_secret_eleasticsearch_db:" "$CONFIG_FILE"
            if [ $? -ne 0 ]; then
                echo 'aws_secret_eleasticsearch_db: "staging/ark-elasticsearch-credentials"' >> "$CONFIG_FILE"
            fi

        else
            # Create the config file with default values if it doesn't exist
            echo "Creating $CONFIG_FILE with default values..."
            cat <<EOF > "$CONFIG_FILE"
aws_access_key_id: ""
aws_secret_access_key: ""
aws_default_region: ""
aws_secret_bucket_name: "staging/ark-bucket-name"
rcp_provider: "http://localhost:6060/v0_7"
chain_id: "0x534e5f4d41494e"
ipfs_timeout_duration: "1m"
loop_delay_duration: "1m"
ipfs_gateway_uri: "https://ipfs.arkproject.dev/ipfs/"
filter:
refresh_contract_metadata: false
rust_log: "info"
aws_secret_read_db: "staging/ark-db-credentials-read-private"
aws_secret_eleasticsearch_db: "staging/ark-elasticsearch-credentials"

EOF
        fi
    ;;

    abort-upgrade)
    ;;

    *)
        echo "preinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0