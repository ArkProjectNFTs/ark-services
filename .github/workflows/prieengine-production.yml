name: Price Engine API (Production) (Mainnet) (Scaleway)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/priceengine-production.yml"
      - "ark-priceengine/**"

jobs:
  discord-notification:
    runs-on: ubuntu-latest
    name: Discord Notification
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Send notification to dev-updates channel
        uses: ./.github/actions/discord-notification
        with:
          discord-webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: "🚢 Deploying Price Engine to Mainnet environment..."
  
  package-price-engine-service:
    runs-on: screenshotlabs/rust-ci-cd-toolchain
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Store Package Name
        id: package-name
        run: echo "PACKAGE_NAME=$(cargo get --entry ark-priceengine package.name)" >> "$GITHUB_OUTPUT"

      - name: Store Package Version
        id: package-version
        run: echo "PACKAGE_VERSION=$(cargo get --entry ark-priceengine package.version)" >> "$GITHUB_OUTPUT"

      - name: Create debian service
        run: |
          cargo deb -p ark-priceengine

      - name: Upload mpackage to artifact
        uses: actions/upload-artifact@v4
        env:
          PACKAGE_NAME: ${{ steps.package-name.outputs.PACKAGE_NAME }}
          PACKAGE_VERSION: ${{ steps.package-version.outputs.PACKAGE_VERSION }}
        with:
          name: debian_package
          path: ark-priceengine/target/debian/${{PACKAGE_NAME}}_${{PACKAGE_VERSION}}-1_amd64.deb
  
  push-priceengine-api-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Output ECR Repository URL
        id: set_ecr_url
        run: |
          cd infrastructure/cdk-ark-ecr
          ECR_URL=$(jq -r '."ark-ecr".ECRRepositoryURL' ./cdk-outputs.json)
          echo "ECR Repository URL: $ECR_URL"
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build indexer, tag, and push image to Amazon ECR
        run: |
          docker buildx create --use --name priceengine-api
          docker buildx build --tag $ECR_URL:priceengine-api-production-latest --file docker/priceengine-api/Dockerfile . --load
          docker push $ECR_URL:priceengine-api-production-latest

  push-priceengine-api-image:
    runs-on: ubuntu-latest

  deploy-to-scaleway:
    runs-on: ubuntu-latest
    needs: [push-marketplace-api-image, package-price-engine-service]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SCALEWAY_PRICEENGINE_API_SSH_KEY }}

      - name: Download math result for job 1
          uses: actions/download-artifact@v4
          with:
            name: debian_package

      - name: Copy debian package to scaleway
          run: |
            scp github@${{ secrets.SCALEWAY_PRICEENGINE_API_IP }}:/debian_package/${{needs.package-price-engine-service.outputs.PACKAGE_NAME}}_${{needs.package-price-engine-service.outputs.PACKAGE_VERSION}}-1_amd64.deb .

      - name: Deploy to Scaleway
        run: |
          ssh -o StrictHostKeyChecking=no github@${{ secrets.SCALEWAY_PRICEENGINE_API_IP }} "dpkg -i ${{needs.package-price-engine-service.outputs.PACKAGE_NAME}}_${{needs.package-price-engine-service.outputs.PACKAGE_VERSION}}-1_amd64.deb && sudo systemctl restart ark-priceengine.service && sleep 10"

      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no github@${{ secrets.SCALEWAY_PRICEENGINE_API_IP }} << EOF
            sudo systemctl status ark-priceengine.service
            docker logs marketplace-api --tail 50
          EOF

      - name: Send success notification to dev-updates channel
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                  "content": "✅ Successfully deployed Priceengine to Production environment."
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send failure notification to dev-updates channel
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                  "content": "❌ Failed to deploy Priceengine to Production environment. Check the logs [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})."
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

