name: Deploy Indexer Stack

on:
  release:
    types: [created]
  pull_request:
    types: [opened, synchronize, closed]
    paths:
      - ".github/workflows/cdk-indexer-deploy.yml"
      - "infrastructure/cdk-indexer/**"
      - "ark-lambdas/lambda-block-indexer/**"
      - "ark-indexer/**"
      - "ark-metadata-refresh/**"
      - "ark-dynamodb/**"

jobs:
  push-indexer-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: |
          npm install -g pnpm
          npm install -g aws-cdk

      - name: Deploy ECR Repository
        run: |
          cd infrastructure/cdk-ecr
          pnpm install
          cdk deploy ECRDeploymentStack --outputs-file ./cdk-outputs.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Output ECR Repository URL
        id: set_ecr_url
        run: |
          cd infrastructure/cdk-ecr
          ECR_URL=$(jq -r '.ECRDeploymentStack.ECRRepositoryURL' ./cdk-outputs.json)
          echo "ECR Repository URL: $ECR_URL"
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build indexer, tag, and push image to Amazon ECR
        run: |
          docker buildx create --use --name ecr-deploy-builder-indexer
          docker buildx build --tag $ECR_URL:indexer-latest --file docker/indexer/Dockerfile . --load
          docker push $ECR_URL:indexer-latest
        env:
          ECR_URL: ${{ env.ECR_URL }}
          INDEXER_TABLE_NAME: ${{ secrets.INDEXER_TABLE_NAME }}
          AWS_NFT_IMAGE_BUCKET_NAME: ${{ secrets.AWS_NFT_IMAGE_BUCKET_NAME }}
          RPC_PROVIDER: ${{ secrets.RPC_PROVIDER }}
          METADATA_IPFS_TIMEOUT_IN_SEC: ${{ secrets.METADATA_IPFS_TIMEOUT_IN_SEC }}
          METADATA_LOOP_DELAY_IN_SEC: ${{ secrets.METADATA_LOOP_DELAY_IN_SEC }}
          IPFS_GATEWAY_URI: ${{ secrets.IPFS_GATEWAY_URI }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  push-metadata-indexer-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: |
          npm install -g pnpm
          npm install -g aws-cdk

      - name: Deploy ECR Repository
        run: |
          cd infrastructure/cdk-ecr
          pnpm install
          cdk deploy ECRDeploymentStack --outputs-file ./cdk-outputs.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Output ECR Repository URL
        id: set_ecr_url
        run: |
          cd infrastructure/cdk-ecr
          ECR_URL=$(jq -r '.ECRDeploymentStack.ECRRepositoryURL' ./cdk-outputs.json)
          echo "ECR Repository URL: $ECR_URL"
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build metadata, tag, and push image to Amazon ECR
        run: |
          docker buildx create --use --name ecr-deploy-builder-metadata
          docker buildx build --tag $ECR_URL:metadata-latest --file docker/metadata/Dockerfile . --load
        env:
          ECR_URL: ${{ env.ECR_URL }}
          INDEXER_TABLE_NAME: ${{ secrets.INDEXER_TABLE_NAME }}
          AWS_NFT_IMAGE_BUCKET_NAME: ${{ secrets.AWS_NFT_IMAGE_BUCKET_NAME }}
          RPC_PROVIDER: ${{ secrets.RPC_PROVIDER }}
          METADATA_IPFS_TIMEOUT_IN_SEC: ${{ secrets.METADATA_IPFS_TIMEOUT_IN_SEC }}
          METADATA_LOOP_DELAY_IN_SEC: ${{ secrets.METADATA_LOOP_DELAY_IN_SEC }}
          IPFS_GATEWAY_URI: ${{ secrets.IPFS_GATEWAY_URI }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy:
    runs-on: ubuntu-latest
    needs: ["push-indexer-image", "push-metadata-indexer-image"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: |
          npm install -g pnpm
          npm install -g aws-cdk

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install Cargo Lambda
        run: |
          pip install cargo-lambda

      - name: CDK Bootstrap (if necessary)
        run: |
          cd infrastructure/cdk-indexer 
          pnpm install
          pnpm cdk bootstrap -c branch=${{ github.ref_name }} -c isPullRequest=${{ github.event_name == 'pull_request' }} -c prNumber=${{ github.event.number || '' }} -c targetBranch=${{ github.event.pull_request.base.ref || '' }} -c indexerVersion=${{ github.event.release.tag_name }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets. AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: CDK Deploy (on push)
        if: github.event_name == 'push'
        run: |
          cd infrastructure/cdk-indexer
          pnpm cdk deploy --require-approval never -c branch=${{ github.ref_name }} -c isPullRequest=false
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Ref Name: ${{ github.ref_name }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets. AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          INDEXER_VERSION: "v."

      - name: CDK Deploy (on PR open/synchronize)
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
        run: |
          cd infrastructure/cdk-indexer
          pnpm cdk deploy --require-approval never -c branch=${{ github.head_ref }} -c isPullRequest=true -c prNumber=${{ github.event.number }} -c targetBranch=${{ github.event.pull_request.base.ref }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          INDEXER_VERSION: "GITHUB-PR-${{ github.event.number }}"

      - name: CDK Destroy (on PR close)
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          cd infrastructure/cdk-indexer
          pnpm cdk destroy --force -c branch=${{ github.head_ref }} -c isPullRequest=true -c prNumber=${{ github.event.number }} -c targetBranch=${{ github.event.pull_request.base.ref }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
