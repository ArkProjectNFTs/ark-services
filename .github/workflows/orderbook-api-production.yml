name: Orderbook API (Production) (AWS)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/orderbook-api-production.yml"
      - "infrastructure/cdk-ark-ecr/**"
      - "infrastructure/cdk-ark-orderbookapi/**"
      - "ark-orderbook-api/**"

jobs:
  push-orderbook-api-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: |
          npm install -g pnpm
          npm install -g aws-cdk

      - name: Output ECR Repository URL
        id: set_ecr_url
        run: |
          cd infrastructure/cdk-ark-ecr
          ECR_URL=$(jq -r '."ark-ecr".ECRRepositoryURL' ./cdk-outputs.json)
          echo "ECR Repository URL: $ECR_URL"
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build indexer, tag, and push image to Amazon ECR
        run: |
          docker buildx create --use --name ecr-deploy-builder-ark-orderbook-api
          docker buildx build --tag $ECR_URL:ark-orderbook-api-production-latest --file docker/ark-orderbook-api/Dockerfile . --load
          docker push $ECR_URL:ark-orderbook-api-production-latest

  deploy:
    runs-on: ubuntu-latest
    needs: [push-orderbook-api-image]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: |
          cd infrastructure/cdk-ark-orderbookapi
          pnpm install

      - name: Bootstrap Orderbook API
        run: |
          cd infrastructure/cdk-ark-orderbookapi
          pnpm build
          pnpm cdk context --clear
          pnpm cdk bootstrap
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets. AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ARKCHAIN_RPC_PROVIDER: ${{ secrets.ARKCHAIN_RPC_PROVIDER }}
          DATABASE_URL: ${{ secrets.ARKCHAIN_DATABASE_URL_PROD }}
          DB_PASSWORD: ${{ secrets.ARKCHAIN_DB_PASSWORD }}
          DB_USERNAME: ${{ secrets.ARKCHAIN_DB_USERNAME }}
          VPC_ID: ${{ secrets.VPC_ID }}

      - name: Deploy Orderbook API
        run: |
          cd infrastructure/cdk-ark-orderbookapi
          pnpm build
          pnpm cdk context --clear
          pnpm cdk deploy --require-approval never -c isProductionEnvironment=true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets. AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ARKCHAIN_RPC_PROVIDER: ${{ secrets.ARKCHAIN_RPC_PROVIDER }}
          VPC_ID: ${{ secrets.VPC_ID }}
          DATABASE_URL: ${{ secrets.ARKCHAIN_DATABASE_URL_PROD }}
          API_USER: ${{ secrets.API_USER }}
          API_PASSWORD: ${{ secrets.API_PASSWORD }}
