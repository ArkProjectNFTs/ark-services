name: Deploy ECR Repository, Push Docker Image and deploy stack

on:
  push:
    branches:
      - main
      - dev
      - feat/postman-export

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: |
          cd infrastructure/cdk-api-gateaway
          pnpm install

      - name: Install CDK
        run: |
          cd infrastructure/cdk-ecr
          npm install -g aws-cdk
          npm install

      - name: Deploy CDK stack
        run: |
          cd infrastructure/cdk-ecr
          cdk deploy ECRDeploymentStack --outputs-file ./cdk-outputs.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Output ECR Repository URL
        run: |
          cd infrastructure/cdk-ecr
          ECR_URL=$(jq -r '.ECRDeploymentStack.ECRRepositoryURL' ./cdk-outputs.json)
          echo "ECR Repository URL: $ECR_URL"
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t $ECR_URL:latest -f docker/metadata/Dockerfile .
          docker push $ECR_URL:latest
        env:
          ECR_URL: ${{ env.ECR_URL }}
          INDEXER_TABLE_NAME: ${{ secrets.INDEXER_TABLE_NAME }}
          AWS_NFT_IMAGE_BUCKET_NAME: ${{ secrets.AWS_NFT_IMAGE_BUCKET_NAME }}
          RPC_PROVIDER: ${{ secrets.RPC_PROVIDER }}
          METADATA_IPFS_TIMEOUT_IN_SEC: ${{ secrets.METADATA_IPFS_TIMEOUT_IN_SEC }}
          METADATA_LOOP_DELAY_IN_SEC: ${{ secrets.METADATA_LOOP_DELAY_IN_SEC }}
          IPFS_GATEWAY_URI: ${{ secrets.IPFS_GATEWAY_URI }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy ArkProjectCdkEcsEc2Stack
        run: |
          cd infrastructure/cdk-ecs-ec2
          ECR_REPOSITORY_URI=$ECR_URL:latest cdk deploy ArkProjectCdkEcsEc2Stack
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          METADATA_IPFS_TIMEOUT_IN_SEC: 5
          METADATA_LOOP_DELAY_IN_SEC: 10
          IPFS_GATEWAY_URI: https://ipfs.arkproject.dev/ipfs/
          ECR_REPOSITORY_URI: ${{ env.ECR_URL }}
