name: MKT NFT Indexer (Production) (Mainnet) (AWS)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/marketplace-nft-indexer-production.yml"
      - "infrastructure/cdk-starknet-indexer/**"
      - "ark-indexer-marketplace/**"
      - "ark-sqlx/providers/marketplace/**"

jobs:
  push-nft-indexer-image-on-aws:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_NFT_IMAGE_BUCKET_NAME: ${{ secrets.AWS_NFT_IMAGE_BUCKET_NAME }}
      RPC_PROVIDER: ${{ secrets.RPC_PROVIDER }}
      METADATA_IPFS_TIMEOUT_IN_SEC: ${{ secrets.METADATA_IPFS_TIMEOUT_IN_SEC }}
      METADATA_LOOP_DELAY_IN_SEC: ${{ secrets.METADATA_LOOP_DELAY_IN_SEC }}
      IPFS_GATEWAY_URI: ${{ secrets.IPFS_GATEWAY_URI }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Send notification to dev-updates channel
        uses: ./.github/actions/discord-notification
        with:
          discord-webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: "Deploying `ark-indexer-marketplace` on Production environment..."

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm and AWS CDK
        run: |
          npm install -g pnpm aws-cdk

      - name: Deploy ECR Repository
        run: |
          cd infrastructure/cdk-ark-ecr
          pnpm install
          cdk deploy ark-ecr --outputs-file ./cdk-outputs.json

      - name: Output ECR Repository URL
        id: set_ecr_url
        run: |
          cd infrastructure/cdk-ark-ecr
          ECR_URL=$(jq -r '."ark-ecr".ECRRepositoryURL' ./cdk-outputs.json)
          echo "ECR Repository URL: $ECR_URL"
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker buildx create --use --name ecr-deploy-builder-indexer
          docker buildx build --tag $ECR_URL:indexer-marketplace-production-latest --file docker/indexer-marketplace/Dockerfile . --load
          docker push $ECR_URL:indexer-marketplace-production-latest

  deploy-nft-indexer-on-scaleway:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: |
          cd infrastructure/cdk-ark-indexer-marketplace
          pnpm install

      - name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Cache Cargo target dir
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STARKNET_NODE_MAINNET_SSH_KEY }}

      - name: Build ark-indexer-marketplace
        run: cargo build --release -p ark-indexer-marketplace

      - name: Apply Marketplace SQL Migrations
        uses: ./.github/actions/marketplace-sql-migrations
        with:
          discord-webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          database-url: ${{ secrets.DATABASE_URL }}

      - name: Ensure deployment directory exists
        run: ssh -o StrictHostKeyChecking=no github@${{ vars.STARKNET_NODE_MAINNET_SERVER_IP }} "mkdir -p /opt/marketplace-nft-indexer"

      - name: Stop the service
        run: ssh -o StrictHostKeyChecking=no github@${{ vars.STARKNET_NODE_MAINNET_SERVER_IP }} "sudo systemctl stop marketplace-nft-indexer.service"

      - name: Upload binary to Scaleway server
        run: scp -o StrictHostKeyChecking=no target/release/ark-indexer-marketplace github@${{ vars.STARKNET_NODE_MAINNET_SERVER_IP }}:/opt/marketplace-nft-indexer/

      - name: Restart the service
        run: ssh -o StrictHostKeyChecking=no github@${{ vars.STARKNET_NODE_MAINNET_SERVER_IP }} "sudo systemctl start marketplace-nft-indexer.service"

      - name: Bootstrap Indexer Marketplace
        run: |
          cd infrastructure/cdk-ark-indexer-marketplace
          pnpm cdk bootstrap -c isProductionEnvironment=true

      - name: Deploy Indexer Marketplace
        run: |
          cd infrastructure/cdk-ark-indexer-marketplace
          pnpm cdk deploy --require-approval never -c isProductionEnvironment=true

      - name: Send success notification to dev-updates channel
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                  "content": "✅ Successfully deployed `ark-indexer-marketplace` on Production environment."
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send failure notification to dev-updates channel
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                  "content": "❌ Failed to deploy `ark-indexer-marketplace` on Production environment. Check the logs [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})."
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
