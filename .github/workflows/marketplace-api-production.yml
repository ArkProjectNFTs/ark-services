name: MKT API (Production) (Mainnet) (Scaleway)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/marketplace-api-production.yml"
      - "ark-marketplace-api/**"
      - "ark-sqlx/providers/marketplace/**"
      - ".sqlx"

jobs:
  discord-notification:
    runs-on: ubuntu-latest
    name: Discord Notification
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Send notification to dev-updates channel
        uses: ./.github/actions/discord-notification
        with:
          discord-webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: "🚢 Deploying Marketplace API to Mainnet environment..."

  push-marketplace-api-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Output ECR Repository URL
        id: set_ecr_url
        run: |
          cd infrastructure/cdk-ark-ecr
          ECR_URL=$(jq -r '."ark-ecr".ECRRepositoryURL' ./cdk-outputs.json)
          echo "ECR Repository URL: $ECR_URL"
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build indexer, tag, and push image to Amazon ECR
        run: |
          docker buildx create --use --name marketplace-api
          docker buildx build --tag $ECR_URL:marketplace-api-production-latest --file docker/marketplace-api/Dockerfile . --load
          docker push $ECR_URL:marketplace-api-production-latest

  deploy-to-scaleway:
    runs-on: ubuntu-latest
    needs: [push-marketplace-api-image]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SCALEWAY_MARKETPLACE_API_SSH_KEY }}

      - name: Apply Marketplace SQL Migrations
        uses: ./.github/actions/marketplace-sql-migrations
        with:
          discord-webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          database-url: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Scaleway
        run: |
          ssh -o StrictHostKeyChecking=no github@${{ secrets.SCALEWAY_MARKETPLACE_API_IP }} "sudo systemctl restart ark-marketplace-api-docker.service && sleep 10"

      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no github@${{ secrets.SCALEWAY_MARKETPLACE_API_IP }} << EOF
            sudo systemctl status ark-marketplace-api-docker.service
            docker logs marketplace-api --tail 50
          EOF

      - name: Send success notification to dev-updates channel
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                  "content": "✅ Successfully deployed Marketplace API to Production environment."
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send failure notification to dev-updates channel
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                  "content": "❌ Failed to deploy Marketplace API to Production environment. Check the logs [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})."
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
