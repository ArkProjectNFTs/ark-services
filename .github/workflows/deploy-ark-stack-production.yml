name: Deploy Production environment to AWS (ArkStack)

on:
  release:
    types: [published]

jobs:
  discord-notification:
    runs-on: ubuntu-latest
    name: Discord Notification
    steps:
      - name: Send notification to dev-updates channel
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                  "content": "ðŸ”— A new release has been published (ark-services ${{ github.event.release.tag_name }}).\nChangelog: https://github.com/ArkProjectNFTs/ark-services/releases/tag/${{ github.event.release.tag_name }}"
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

  cdk-management-on-release:
    runs-on: ubuntu-latest
    name: CDK Management on Release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: |
          cd infrastructure/cdk-ark-stack
          pnpm install

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Cache Cargo target dir
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-

      - name: Build Rust Lambda with Cargo
        run: |
          pip install cargo-lambda
          cargo lambda build --release

      - name: Bootstrap Ark Stack
        run: |
          cd infrastructure/cdk-ark-stack
          pnpm cdk bootstrap -c branch=${{ github.ref_name }} -c isRelease=true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets. AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy Ark Stack
        run: |
          cd infrastructure/cdk-ark-stack
          pnpm cdk deploy --require-approval never -c isRelease=true
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Ref Name: ${{ github.ref_name }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Bootstrap CDK Indexer
        run: |
          cd infrastructure/cdk-indexer 
          pnpm install
          pnpm cdk bootstrap
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets. AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy CDK Indexer
        run: |
          cd infrastructure/cdk-indexer
          pnpm cdk deploy --require-approval never -c isPullRequest=false
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Ref Name: ${{ github.ref_name }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets. AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          INDEXER_VERSION: ${{ github.event.release.tag_name }}
