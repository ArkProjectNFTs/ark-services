name: Release, Notify, and Deploy Workflow

on:
  release:
    types: [published]

jobs:
  discord-notification:
    runs-on: ubuntu-latest
    name: Discord Notification
    steps:
      - name: Send notification to dev-updates channel
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                  "content": "ðŸ”— A new release has been published (ark-services ${{ github.event.release.tag_name }}).\nChangelog: https://github.com/ArkProjectNFTs/ark-services/releases/tag/${{ github.event.release.tag_name }}"
              }' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

  push-docker-image:
    runs-on: ubuntu-latest
    name: Push Docker Image
    env:
      AWS_REGION: us-east-1
      REPOSITORY: arkproject
      TAG: ${{ github.event.release.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.5.5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.3.3

      - name: Build, Tag, and Push Docker Image to Amazon ECR
        env:
          INDEXER_AWS_ACCESS_KEY_ID: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          INDEXER_AWS_SECRET_ACCESS_KEY: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}:${{ env.TAG }} --build-arg AWS_ACCESS_KEY_ID=${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }} --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }} -f Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}:${{ env.TAG }}

  update-task-definition:
    needs: push-docker-image
    runs-on: ubuntu-latest
    name: Update ECS Task Definitions
    strategy:
      matrix:
        environment: [mainnet, testnet] # Define your environments here
    env:
      AWS_REGION: us-east-1
      REPOSITORY: arkproject
      TAG: ${{ github.event.release.tag_name }}
      CONTAINER_NAME: ark_indexer
      SERVICE_NAME: ark-indexer-${{ matrix.environment }}
      CLUSTER_NAME: ark-indexers
      TASK_DEFINITION_FILE: infrastructure/ecs/indexer-${{ matrix.environment }}.json
      INDEXER_TABLE_NAME: ark_project_${{ matrix.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.5.5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.3.3

      - name: Update Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: "${{ env.TASK_DEFINITION_FILE }}"
          container-name: "${{ env.CONTAINER_NAME }}"
          image: "${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}:${{ env.TAG }}"

      - name: Add environment variables to ECS task definition
        id: add-env-var
        uses: cvmaker-bv/amazon-ecs-task-environment@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.INDEXER_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.INDEXER_AWS_SECRET_ACCESS_KEY }}
          INDEXER_VERSION: ${{ github.event.release.tag_name }}
          RPC_PROVIDER: ${{ matrix.environment == 'mainnet' && secrets.RPC_PROVIDER_MAINNET || secrets.RPC_PROVIDER_TESTNET }}
          IPFS_GATEWAY_URI: "https://ipfs.arkproject.dev"
          RUST_LOG: "info"
          HEAD_OF_CHAIN: "true"
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          container-name: "${{ env.CONTAINER_NAME }}"
          env-variables: "${{ toJson(env) }}"

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.add-env-var.outputs.task-definition }}
          service: "${{ env.SERVICE_NAME }}"
          cluster: "${{ env.CLUSTER_NAME }}"

  cdk-management-on-release:
    runs-on: ubuntu-latest
    name: CDK Management on Release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: |
          cd infrastructure/cdk-api-gateaway
          pnpm install

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Cache Cargo target dir
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-

      - name: Build Rust Lambda with Cargo
        run: |
          pip install cargo-lambda
          cargo lambda build --release

      - name: CDK Bootstrap (if necessary)
        run: |
          cd infrastructure/cdk-api-gateaway
          pnpm cdk bootstrap -c branch=${{ github.ref_name }} -c isRelease=true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets. AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: CDK Deploy (on release)
        run: |
          cd infrastructure/cdk-api-gateaway
          pnpm cdk deploy --require-approval never -c branch=${{ github.ref_name }} -c isRelease=true
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Ref Name: ${{ github.ref_name }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CDK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CDK_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_CDK_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
